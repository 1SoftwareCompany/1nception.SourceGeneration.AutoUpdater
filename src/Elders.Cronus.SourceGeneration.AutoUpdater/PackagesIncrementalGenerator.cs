using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Elders.Cronus.SourceGeneration.AutoUpdater;

[Generator(LanguageNames.CSharp)]
public class PackagesIncrementalGenerator : IIncrementalGenerator
{
    private const string Cronus = "cronus";
    private const string CronusGlobalNamespace = "Elders.Cronus";
    private const string CronusBootstrapFileName = "CronusMigratorStartup";
    private const string FileExtension = ".g.cs";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        IncrementalValueProvider<IEnumerable<AssemblyIdentity>> cronusReferencedAssemblyNames = context.CompilationProvider
            .Select(static (c, _) =>
            c.ReferencedAssemblyNames.Where(reference => reference.Name.Contains(Cronus, StringComparison.OrdinalIgnoreCase)));

        context.RegisterSourceOutput(cronusReferencedAssemblyNames, (spc, references) =>
        {
            if (references.Select(x => x.Version.Major).Distinct().Count() == 1) // TODO: decide what we do if there are packets with different versions. For now we need all of them to be latest major version to do an update.
            {
                int theCurrentVersion = references.OrderByDescending(x => x.Version.Major).First().Version.Major;

                string bootstrapFile = GetBootstrapFile(CronusBootstrapFileName, CronusGlobalNamespace, theCurrentVersion);
                spc.AddSource(CronusBootstrapFileName + FileExtension, bootstrapFile);
            }
        });
    }

    private static string GetBootstrapFile(string className, string @namespace, int majorAssemblyCronusVersion) // runtime da sledim versiite?
    {
        string cronusAutoUpdaterBootstrapFile = @$"// <auto-generated /> 
using Microsoft.Extensions.Options;
using Microsoft.Extensions.Logging;
using Elders.Cronus.Multitenancy;
using Elders.Cronus.EventStore.AutoUpdater.Commands;
using Elders.Cronus.EventStore.AutoUpdater;
using System.Threading.Tasks;
using Elders.Cronus.AutoUpdates;
using System.Collections.Generic;
using Elders.Cronus.MessageProcessing;
using System;
using System.Linq;
{(@namespace is null ? null : $@"namespace {@namespace}
{{")}
   [CronusStartup(Bootstraps.Runtime)]
   partial class {className} : ICronusTenantStartup
   {{
        private readonly IEnumerable<IAutoUpdate> _autoUpdates;
        private readonly IPublisher<ICommand> _publisher;
        private readonly BoundedContext _boundedContext;     
        private readonly ICronusContextAccessor _cronusContextAccessor;
        private readonly ILogger<{className}> _logger;
        
        private const int CronusCurrentInstalledVersion = {majorAssemblyCronusVersion};
        private const string EldersDefaultNamespace = ""Elders.Cronus"";
        private const int Modifier = 100;
          
        public {className}(IEnumerable<IAutoUpdate> autoUpdates, IPublisher<ICommand> publisher, IOptions<BoundedContext> bcProvider, ICronusContextAccessor cronusContextAccessor, ILogger<{className}> logger)
        {{
            _autoUpdates = autoUpdates;
            _publisher = publisher;
            _boundedContext = bcProvider.Value;
            _cronusContextAccessor = cronusContextAccessor;
            _logger = logger;
        }}
        
        public void Bootstrap()
        {{
            var allAutoUpdates = GetAutoUpdates();
        
            bool isPropoerlyConfigured = DoSanityCheck(allAutoUpdates);
            if(isPropoerlyConfigured)
            {{
                var id = new AutoUpdaterId(_boundedContext.Name, _cronusContextAccessor.CronusContext.Tenant);
                var command = new BulkRequestAutoUpdate(id, _boundedContext.Name, allAutoUpdates, DateTimeOffset.UtcNow);
                 _publisher.Publish(command);
               }}
        }}
        
        private bool DoSanityCheck(IEnumerable<SingleAutoUpdate> current)
        {{
            var distinct = current.DistinctBy(x => x.Sequence);
            if (distinct.Count() != current.Count())
            {{
                _logger.LogWarning(""You have configured something wrong. You have duplicate sequences for some auto updates. Please fix it to start the auto update process"");
                return false;
            }}
            return true;
        }}

        private IEnumerable<SingleAutoUpdate> GetAutoUpdates()
        {{
            foreach (var autoUpdate in _autoUpdates) 
            {{
                var result = GetSequence(autoUpdate);
                yield return new SingleAutoUpdate(autoUpdate.Name, result.Sequence, result.IsSystem);
            }}
        }}
        
        private (uint Sequence, bool IsSystem) GetSequence(IAutoUpdate autoUpdate)
        {{
            bool isSystem = false;
            uint sequence = autoUpdate.ExecutionSequence;

            string @namespace = autoUpdate.GetType().Namespace;
            if(string.IsNullOrEmpty(@namespace) == false)
            {{
                if(@namespace.Contains(EldersDefaultNamespace) == false) // not system updates are executed after the system ones are completed
                {{
                    sequence *= Modifier;
                }}
                else
                {{
                    isSystem = true;
                }}
            }}
            return (sequence, isSystem);
        }}
   }}
{(@namespace is null ? null : @"}")}";
        return cronusAutoUpdaterBootstrapFile;
    }

}
